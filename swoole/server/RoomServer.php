<?php
namespace app\swoole\server;
require str_replace("\\","/",dirname(dirname(__DIR__)))."/vendor/autoload.php";

use app\common\Func\Config;
use app\swoole\common\BaseServer;
use app\swoole\common\lib\MessType;
use app\swoole\common\pool\RedisPool;
use app\swoole\logic\room\RoomLogic;
use app\swoole\logic\room\RoomServerType;
use Swoole\Table;

class RoomServer extends BaseServer
{
    /**
     * 存放用户信息
     * @var
     */
    public $clientFd;

    public $fdClient;

    //内部服务的name->fd
    public $innerClientFd;

    //房间对应的转发客户端
    public $roomInnerClient;

    public function __construct()
    {
        $this->redisPool = RedisPool::initPool();
        parent::__construct();
    }

    public function initServer()
    {
        $this->server = new \Swoole\WebSocket\Server($this->host,$this->port);
        $this->server->set($this->serverSet);
        $this->server->on('workerStart',[$this,'onWorkerStart']);
        $this->server->on('open',[$this,'onOpen']);
        $this->server->on('message',[$this,'onMessage']);
        $this->server->on('close',[$this,'onClose']);
        $this->startInnerServer();
        $this->createTable();
        $this->server->start();
    }

    /**
     * 新建共享内存表
     */
    public function createTable()
    {
        $this->clientFd = new Table(1024,1);
        $this->clientFd->column('account',Table::TYPE_STRING,64);
        $this->clientFd->column('name',Table::TYPE_STRING,64);
        $this->clientFd->column('roomId',Table::TYPE_STRING,64);
        $this->clientFd->column('fd',Table::TYPE_INT,64);
        $this->clientFd->create();

        $this->fdClient = new Table(1024,1);
        $this->fdClient->column('account',Table::TYPE_STRING,64);
        $this->fdClient->create();

        $this->innerClientFd = new Table(1024,1);
        $this->innerClientFd->column('fd',Table::TYPE_INT,64);
        $this->innerClientFd->column('roomNum',Table::TYPE_INT,64);
        $this->innerClientFd->create();

        $this->roomInnerClient = new Table(1024,1);
        $this->roomInnerClient->column('roomRealName',Table::TYPE_STRING,64);
        $this->roomInnerClient->create();
    }


    public function onOpen(\Swoole\Server $server,$request)
    {
        $this->logPrint(LOG_INFO,"连接开始了");
    }

    public function onMessage(\Swoole\Server $server,$frame)
    {
        $data = json_decode($frame->data,true);
        $data['fd'] = $frame->fd;
        $this->initUser($data);
        $this->outDispatch($data);
    }
    public function onClose(\Swoole\Server $server, int $fd, int $reactorId)
    {
        parent::onClose($server, $fd, $reactorId); // TODO: Change the autogenerated stub
        $account = $this->fdClient->get($fd,'account');
        $userInfo = $this->clientFd->get($account);
        $this->outDispatch([
            'messType' => MessType::USER_OFFLINE,
            'data' => $userInfo
        ]);
        $this->fdClient->del($fd);
        $this->clientFd->del($account);
    }

    public function outDispatch($data)
    {
        $type = $data['messType'];
        switch ($type){
            case MessType::PING:
                return;
            case MessType::INIT_USER_ROOM_INFO:
                $this->initRoom($data);
                break;
        }
        $this->sendToInnerSer($data);
    }

    public function toOutClient($data)
    {
        $type = $data['type'];
        switch ($type){
            case RoomServerType::TO_OWN:
                $this->sendToClient($data['fd'],$data);
                break;
            case RoomServerType::TO_ALL_CLIENT:
                $this->sendAllClient($data);
                break;
            case RoomServerType::TO_ROOM_ALL:
                $this->sendRoomAll($data);
                break;
            case RoomServerType::TO_CLIENT:
                $this->sendToClient($data['toFd'],$data);
                break;
        }
    }

    /**
     * 转发给所有客户端的消息
     */
    public function sendAllClient($data)
    {
        $this->sendToClient($this->server->connections,$data);
    }

    public function sendRoomAll($data)
    {
        $roomId = $data['roomId'];
        $fds = $this->logic->getAllFdsByRoom($roomId);
        $this->sendToClient($fds,$data);
    }

    /**
     * 转发给指定的额client的消息
     * @param $fd
     * @param $data
     */
    public function sendToClient($fd,$data)
    {
        $fd = (array)$fd;
        $data = $data['data'];
        $data = json_encode($data);
        foreach($fd as $v){
            $this->server->push($v,$data);
        }
    }

    public function sendToInnerSer($data)
    {
        $roomRealName = $this->roomInnerClient->get($data['data']['roomId'],'roomRealName');
        $fd = $this->innerClientFd->get($roomRealName,'fd');
        $this->server->send($fd,json_encode($data));
    }

    public function initUser($data)
    {
        $account = $data['data']['account'];
        if(!$this->clientFd->exist($account) || $this->clientFd->get($account,'roomId') != $data['data']['roomId']){
            $redis = $this->redisPool->get();
            $userInfo = $redis->hGetAll('user:'.$account);
            $this->redisPool->release($redis);
            $this->clientFd->set($account,[
                'name' => $userInfo['name'],
                'account' => $account,
                'fd' => $data['fd'],
                'roomId' => $data['data']['roomId'],
            ]);
        }
        $this->fdClient->set($data['fd'],['account'=>$account]);
    }

    public function initRoom($data)
    {
        $data = $data['data'];
        if(!$this->roomInnerClient->exist($data['roomId'])){
            $roomReal = $this->selectRoomSite();
            $this->roomInnerClient->set($data['roomId'],[
                'roomRealName' => $roomReal
            ]);
        }
    }




    public function startInnerServer()
    {
        $conf = new Config();
        $innerCnf = $conf->getConfig($this->type,'innerServer');
        $this->innerServer = $this->server->addListener($innerCnf['host'],$innerCnf['port'],SWOOLE_SOCK_TCP);
        $this->innerServer->set($innerCnf['set']);
        $this->innerServer->on('connect',[$this,'innerOnConnect']);
        $this->innerServer->on('receive',[$this,'innerOnReceive']);
        $this->innerServer->on('close',[$this,'innerOnClose']);

    }


    public function onWorkerStart(\Swoole\Server $server, int $workerId)
    {
        parent::onWorkerStart($server, $workerId); // TODO: Change the autogenerated stub
        $this->logic = new RoomLogic($this,$workerId);
    }

    /**********************************************内部监听开启***********************************************/


    public function innerOnConnect(\Swoole\Server $server,int $fd)
    {
        $this->logPrint(LOG_INFO,"内部监听连接成功，连接的fd为：{$fd}");
    }

    public function innerOnReceive(\Swoole\Server $server,int $fd,int $from_id,$data)
    {
        $this->logPrint(LOG_INFO,"内部监听接受消息成功数据为:");
        $data = json_decode($data,true);
        $data['fd'] = $fd;
        $this->dispatch($data);
    }

    public function innerOnClose(\Swoole\Server $server,int $fd)
    {
        $this->logPrint(LOG_INFO,"内部监听连接成功关闭，关闭的连接的fd为：{$fd}");
        $this->innerClear();
    }

    public function innerClear()
    {

    }

    public function selectRoomSite()
    {
        $roomName = null;
        $roomNum = -1;
        foreach($this->innerClientFd as $key=>$v){
            if($roomNum == -1){
                $roomNum = $v['roomNum'];
                $roomName = $key;
            }else{
                if($roomNum > $v['roomNum']){
                    $roomSite = $key;
                    $roomName = $v['roomNum'];
                }
            }
        }
        return $roomName;
    }

    public function dispatch($data)
    {
        $type = $data['type'];
        switch ($type){
            case MessType::CLIENT_SYN:
                $this->setInnerClient($data);
                break;
            //心跳
            case MessType::PING:
            default:
                break;
        }
    }



    public function setInnerClient($data)
    {
        $this->innerClientFd->set($data['data']['name'],['fd'=>$data['fd'],'roomNum'=>$data['data']['roomNum']]);
    }

    /**********************************************内部监听结束***********************************************/

}
new RoomServer();
